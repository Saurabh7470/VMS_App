@page "/IdentityDialog"
@using VMS_App.Shared.Models;
@using System.Text.RegularExpressions;
@inject NavigationManager navigate
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudForm @ref="form">
        <MudGrid> 
            <MudItem md="12" xs="12" sm=12 lg="12">

                <MudAutocomplete T="Tbl_IdentityType" Label="Id Type" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="selectedId" SearchFunc="@getId" ToStringFunc="@(x=> x.Idtype)" Required="true" RequiredError="Please Select the IdType!">

                </MudAutocomplete>
            </MudItem>
                  
            <MudItem md="12" xs="12" sm=12 lg="12">

                <MudTextField Label="Description" T="string" Lines="3" @bind-Value="User.Description" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Description" AdornmentColor="Color.Default" Required="true" RequiredError="Please add the Description!"></MudTextField>
            </MudItem>
        </MudGrid>
        </MudForm>

    </DialogContent>
    <DialogActions>
         <MudButton OnClick="Cancel">Cancel</MudButton> 
        <MudButton Color="Color.Success" OnClick="Ok">Save</MudButton>
    </DialogActions>
</MudDialog>


@code{

    MudForm form = new MudForm();

    List<Tbl_IdentityType> Users = new List<Tbl_IdentityType>();
    Tbl_IdentityType User = new Tbl_IdentityType();
    Tbl_IdentityType selectedId = new Tbl_IdentityType();



    @code {
        [CascadingParameter] MudDialogInstance MudDialog { get; set; }

        void ok() => MudDialog.Close(DialogResult.Ok(true));
        void Cancel() => MudDialog.Cancel();
    }


    protected async override Task OnInitializedAsync()

        {
    @* Users.Add(new Tbl_IdentityType { Id = 1, IdType = "AadharCard",  });
    Users.Add(new Tbl_IdentityType { Id = 2, IdType = "VoterId",  }); *@

        }



    public async Task<IEnumerable<Tbl_IdentityType>> getId(string value)
        {

    await Task.Delay(5);

    // if text is null or empty, show complete list
    if (string.IsNullOrEmpty(value))
        return Users;
    return Users.Where(x => x.Idtype.Contains(value));
        }




        private async Task<IEnumerable<Tbl_IdentityType>> Search1(string value)
        {
    // In real life use an asynchronous function for fetching data from an api.
    await Task.Delay(5);

    // if text is null or empty, show complete list
    if (string.IsNullOrEmpty(value))
        return Users;
    return Users.Where(x => x.Idtype.Contains(value));
        }



        public async void Ok()
        {

           OnInitializedAsync();
           MudDialog.Close();
           await form.Validate();
           if (form.IsValid)
           {

                    Users.Add(new Tbl_IdentityType()
                {

                    Idtype = selectedId.Idtype,
                    Description = User.Description

                        });
                await form.ResetAsync();
                StateHasChanged();
            }
        }





}




