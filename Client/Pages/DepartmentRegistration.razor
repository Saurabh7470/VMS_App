@page "/DepForm"
@using VMS_App.Shared.Models;
@using System.Text.RegularExpressions;
@inject NavigationManager navigate


<MudCard Elevation="4" Outlined Class="m-2">
     <MudCardHeader>
         <MudButton OnClick="Back" Variant="Variant.Filled"><MudIcon Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Small" />Back</MudButton>
     </MudCardHeader>
     <MudCardContent>

         <MudText Typo="Typo.h5" Style="text-align:center; font-family:Arial" Class="mb-3" Color="Color.Dark">Department Registration</MudText>
         <MudDivider Light DividerType="DividerType.Middle" Class="m-2 mb-5" />
         <MudForm @ref="form">

             <MudGrid>
                 <MudItem md="12" sm="12" xs="12" Class="justify-content-center d-flex">
                     <MudButton Variant="Variant.Filled" OnClick="Addnew" Color=Color.Tertiary Class="mt-5 mb-3"><MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Default" /> Add</MudButton>
                 </MudItem>
             </MudGrid>

             <MudDataGrid Items="departments">
                 <Columns>

                     <PropertyColumn Property="x => x.DeptName" />
                     <PropertyColumn Property="x => x.Hod" Title="HOD" />2
                     <TemplateColumn CellClass="d-flex justify-end" Title="Action">
                         <CellTemplate>
                             <MudStack Row>

                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(()=> Edit(context.Item.Id))" Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Primary"></MudIconButton>
                                @if (employee.Status == 1)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" OnClick="active" Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Success" Disabled="@Disable"></MudIconButton>
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="deactive" Size="@Size.Small" Variant="@Variant.Text" Color="@Color.Error" Disabled="@Disable2"></MudIconButton>
                                }
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudForm>




        <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
            <DialogContent>
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Style=" text-align: centemar; margin-left:92%" OnClick="cancel" Size="Size.Large" Color="Color.Error"></MudIconButton>
                <MudForm @ref="form">

                    <MudGrid>

                        <MudItem md="12" xs="12" sm=12 lg="12">

                            <MudTextField Label="Department Name" T="string" @bind-Value="department.DeptName" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" RequiredError="Please Enter the Department Name!"></MudTextField>
                        </MudItem>

                        <MudItem md="12" xs="12" sm=12 lg="12">

                            <MudAutocomplete T="Guid" Label="HOD" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="department.Hod" SearchFunc="@getDepartment" Required="true" RequiredError="Please Select the Department!">

                            </MudAutocomplete>
                        </MudItem>
                    </MudGrid>

                    <br />
                    <MudCardActions Style="justify-content:center">
                        <MudButton Variant="Variant.Filled" Style="border-radius: 8px; width:90%;" Class="mt-4 mb-4 ml-5" Color="Color.Success" OnClick="Submit">Submit</MudButton>
                    </MudCardActions>

                </MudForm>


            </DialogContent>

        </MudDialog>

    </MudCardContent>
</MudCard>


@code {
    MudForm form = new MudForm();
    private bool visible;
    private bool Disable = false;
    private bool Disable2 = true;
    private DialogOptions dialogOptions = new() { FullWidth = true };


    List<Tbl_EmployeeMaster> employees = new List<Tbl_EmployeeMaster>();
    Tbl_EmployeeMaster employee = new Tbl_EmployeeMaster();
    Tbl_EmployeeMaster selectedDesignation = new Tbl_EmployeeMaster();

    List<Tbl_DepartmentMaster> departments = new List<Tbl_DepartmentMaster>();
    Tbl_DepartmentMaster department = new Tbl_DepartmentMaster();
    Tbl_DepartmentMaster selectedDepartment = new Tbl_DepartmentMaster();

    List<string> HOD;



    protected async override Task OnInitializedAsync()
    {

        // HOD = new List<string> { "DEVELOPER", "PM", "JD" };

        departments = await httpServices.GetData<List<Tbl_DepartmentMaster>>("api/Department");
        // departments.Add(new Tbl_DepartmentMaster() { Id = 1, DepartmentCode = "101", DepartmentName = "IT" , HOD="DEVLOPER"});
        // departments.Add(new Tbl_DepartmentMaster() { Id = 2, DepartmentCode = "102", DepartmentName = "Finance", HOD="JD" });

    }



    private void Back()
    {
        navigate.NavigateTo("/");
    }

    public void Addnew()
    {

        department = new();
        selectedDepartment = new();
        // employee.Equals(null);
        visible = true;
        StateHasChanged();

    }


    async Task cancel()
    {
        visible = false;
        StateHasChanged();
    }


    public async void Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            //     if (department.Id == null)
            //     {


            //         departments.Add(new Tbl_DepartmentMaster()
            //             {

            //                  // Id = departments.Count() + 1,
            //                  DepartmentCode = (departments.Count() + 100).ToString(),
            //                 DepartmentName = department.DepartmentName,
            //                 HOD = department.HOD
            //             });
            // }
            //     else
            //     {

            //         var item = departments.Find(a => a.Id == department.Id);

            //         if (item != null)
            //         {
            //             departments.Remove(item);
            //             departments.Add(new Tbl_DepartmentMaster()
            //             {
            //                    Id = item.Id,
            //                    DepartmentCode = (departments.Count() + 100).ToString(),
            //                   DepartmentName = department.DepartmentName,
            //                   HOD = department.HOD
            //         });
            //         }
            //     }
            await form.ResetAsync();
            visible = false;
            StateHasChanged();
        }
    }

        private async Task Edit(Guid id)
        {
            var item = departments.Find(a => a.Id);
            if(item != null)
            {
            department = item;
            selectedDepartment = item;
            visible = true;
            StateHasChanged();
            }

        }

        public void active()
        {
            Disable = true;
        }

        public void deactive()
        {
            Disable2 = false;
        }



        public async Task<IEnumerable<string>> getDepartment(string value)
        {

            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return HOD;
            return HOD.Where(x => x.Contains(value));
        }



        public async Task<IEnumerable<Tbl_DepartmentMaster>> Search1(string value)
        {
            // In real life use an asynchronous function for fetching data from an api.
            await Task.Delay(5);

            // if text is null or empty, show complete list
            if (string.IsNullOrEmpty(value))
                return departments;
            return departments.Where(x => x.DeptName.Contains(value));
        }

        private bool Email(String val)
        {
            Regex regex = new Regex("^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$");
            return regex.IsMatch(val ?? "valid");
        }



    }


