@page "/DepForm"
@using VMS_App.Shared.Models;
@using System.Text.RegularExpressions;
@inject NavigationManager navigate


<MudCard Elevation="4" Outlined Class="m-2">
    <MudCardHeader>
         <MudButton OnClick="Back" Variant="Variant.Filled"><MudIcon Icon="@Icons.Material.Filled.ArrowBack" Size="Size.Small" />Back</MudButton>
    </MudCardHeader>



<MudCardContent>

    <MudText Typo="Typo.h5" Style="text-align:center; font-family:Arial" Class="mb-3" Color="Color.Dark">Department Registration</MudText>

    <MudForm @ref="form">
        <br />

         <MudGrid>
             <MudItem md="6" xs="12" sm=12>
                 <MudText>Department Code</MudText>
                <MudAutocomplete T="Tbl_DepartmentMaster" Class="mt-2" MaxLength="10" Placeholder="Department" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="selectedDepartment" SearchFunc="@getDepartment" ToStringFunc="@(x=> x.DepartmentCode)" Required="true" RequiredError="Please Select the Department!">

                  </MudAutocomplete>
              </MudItem>
             <MudItem md="6" xs="12" sm=12>
                  <MudText> Department Name</MudText>
                  <MudAutocomplete T="Tbl_DepartmentMaster" Class="mt-2" Placeholder="Department" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="selectedDepartment" SearchFunc="@getDepartment" ToStringFunc="@(x=> x.DepartmentName)" Required="true" RequiredError="Please Select the Department!">

                  </MudAutocomplete>
             </MudItem>
         </MudGrid>

         <MudGrid>
             <MudItem md="6" xs="12" sm=12>
                  <MudText>HOD</MudText>
                      <MudTextField Placeholder="HOD" T="string"  Class="mt-2" @bind-value="employee.Designation" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Person" AdornmentColor="Color.Default" Required="true" RequiredError="Please Enter Your Designation!"></MudTextField>
              </MudItem>

          </MudGrid>


          <br />
          <MudCardActions Style="justify-content:center">
              <MudButton Variant="Variant.Filled" Style="border-radius: 8px; width:90%;" Class="mt-5 mb-4 ml-5" Color="Color.Success" OnClick="Submit">Submit</MudButton>
          </MudCardActions>
      </MudForm>
 </MudCardContent>
 </MudCard>


@code {
    MudForm form = new MudForm();



    List<Tbl_EmployeeMaster> employees = new List<Tbl_EmployeeMaster>();
    Tbl_EmployeeMaster employee = new Tbl_EmployeeMaster();
    Tbl_EmployeeMaster selectedDesignation = new Tbl_EmployeeMaster();

    List<Tbl_DepartmentMaster> deparments = new List<Tbl_DepartmentMaster>();
    Tbl_DepartmentMaster selectedDepartment = new Tbl_DepartmentMaster();



    protected async override Task OnInitializedAsync()
    {
        deparments.Add(new Tbl_DepartmentMaster() { Id = 1, DepartmentCode = "101", DepartmentName = "IT" });
        deparments.Add(new Tbl_DepartmentMaster() { Id = 2, DepartmentCode = "102", DepartmentName = "Finance" });
        deparments.Add(new Tbl_DepartmentMaster() { Id = 3, DepartmentCode = "103", DepartmentName = "EDUCATION" });
        deparments.Add(new Tbl_DepartmentMaster() { Id = 4, DepartmentCode = "104", DepartmentName = "SALES" });


    }

    private void Back()
    {
        navigate.NavigateTo("/");
    }


    public async Task Submit()
    {
        
    }


    public async Task<IEnumerable<Tbl_DepartmentMaster>> getDepartment(string value)
    {

        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return deparments;
        return deparments.Where(x => x.DepartmentName.Contains(value));
    }



    private async Task<IEnumerable<Tbl_DepartmentMaster>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return deparments;
        return deparments.Where(x => x.DepartmentName.Contains(value));
    }

    public bool Email(String val)
    {
        Regex regex = new Regex("^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$");
        return regex.IsMatch(val ?? "valid");
    }



}

